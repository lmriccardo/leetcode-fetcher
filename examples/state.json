{
  "lastCommand": "create",
  "fetchedProblems": {
    "count": 2,
    "questions": [
      {
        "questionId": "9",
        "questionFrontendId": "9",
        "title": "Palindrome Number",
        "titleSlug": "palindrome-number",
        "content": "<p>Given an integer <code>x</code>, return <code>true</code><em> if </em><code>x</code><em> is a </em><span data-keyword=\"palindrome-integer\"><em><strong>palindrome</strong></em></span><em>, and </em><code>false</code><em> otherwise</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 121\n<strong>Output:</strong> true\n<strong>Explanation:</strong> 121 reads as 121 from left to right and from right to left.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = -121\n<strong>Output:</strong> false\n<strong>Explanation:</strong> From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 10\n<strong>Output:</strong> false\n<strong>Explanation:</strong> Reads 01 from right to left. Therefore it is not a palindrome.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-2<sup>31</sup>&nbsp;&lt;= x &lt;= 2<sup>31</sup>&nbsp;- 1</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Could you solve it without converting the integer to a string?",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "similarQuestions": "[{\"title\": \"Palindrome Linked List\", \"titleSlug\": \"palindrome-linked-list\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Find Palindrome With Fixed Length\", \"titleSlug\": \"find-palindrome-with-fixed-length\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Strictly Palindromic Number\", \"titleSlug\": \"strictly-palindromic-number\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"  Count Symmetric Integers\", \"titleSlug\": \"count-symmetric-integers\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Find the Count of Good Integers\", \"titleSlug\": \"find-the-count-of-good-integers\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Find the Largest Palindrome Divisible by K\", \"titleSlug\": \"find-the-largest-palindrome-divisible-by-k\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "exampleTestcaseList": [
          "121",
          "-121",
          "10"
        ],
        "topicTags": [
          {
            "name": "Math",
            "id": "VG9waWNUYWdOb2RlOjg=",
            "slug": "math"
          }
        ],
        "codeSnippets": [
          {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    bool isPalindrome(int x) {\n        \n    }\n};"
          },
          {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public boolean isPalindrome(int x) {\n        \n    }\n}"
          },
          {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        "
          },
          {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def isPalindrome(self, x: int) -> bool:\n        "
          },
          {
            "lang": "C",
            "langSlug": "c",
            "code": "bool isPalindrome(int x) {\n    \n}"
          },
          {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public bool IsPalindrome(int x) {\n        \n    }\n}"
          },
          {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {number} x\n * @return {boolean}\n */\nvar isPalindrome = function(x) {\n    \n};"
          },
          {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function isPalindrome(x: number): boolean {\n    \n};"
          },
          {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param Integer $x\n     * @return Boolean\n     */\n    function isPalindrome($x) {\n        \n    }\n}"
          },
          {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func isPalindrome(_ x: Int) -> Bool {\n        \n    }\n}"
          },
          {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun isPalindrome(x: Int): Boolean {\n        \n    }\n}"
          },
          {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {\n  bool isPalindrome(int x) {\n    \n  }\n}"
          },
          {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func isPalindrome(x int) bool {\n    \n}"
          },
          {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer} x\n# @return {Boolean}\ndef is_palindrome(x)\n    \nend"
          },
          {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def isPalindrome(x: Int): Boolean = {\n        \n    }\n}"
          },
          {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn is_palindrome(x: i32) -> bool {\n        \n    }\n}"
          },
          {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (is-palindrome x)\n  (-> exact-integer? boolean?)\n  )"
          },
          {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec is_palindrome(X :: integer()) -> boolean().\nis_palindrome(X) ->\n  ."
          },
          {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do\n  @spec is_palindrome(x :: integer) :: boolean\n  def is_palindrome(x) do\n    \n  end\nend"
          }
        ],
        "hints": [
          "Beware of overflow when you reverse the integer."
        ],
        "solution": {
          "id": "233",
          "canSeeDetail": false,
          "paidOnly": true,
          "hasVideoSolution": true,
          "paidOnlyVideo": true
        },
        "acRate": 58.51496229270511,
        "paidOnly": false,
        "status": null,
        "hasSolution": true,
        "hasVideoSolution": true
      },
      {
        "questionId": "20",
        "questionFrontendId": "20",
        "title": "Valid Parentheses",
        "titleSlug": "valid-parentheses",
        "content": "<p>Given a string <code>s</code> containing just the characters <code>&#39;(&#39;</code>, <code>&#39;)&#39;</code>, <code>&#39;{&#39;</code>, <code>&#39;}&#39;</code>, <code>&#39;[&#39;</code> and <code>&#39;]&#39;</code>, determine if the input string is valid.</p>\n\n<p>An input string is valid if:</p>\n\n<ol>\n\t<li>Open brackets must be closed by the same type of brackets.</li>\n\t<li>Open brackets must be closed in the correct order.</li>\n\t<li>Every close bracket has a corresponding open bracket of the same type.</li>\n</ol>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;()&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">true</span></p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;()[]{}&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">true</span></p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;(]&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">false</span></p>\n</div>\n\n<p><strong class=\"example\">Example 4:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;([])&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">true</span></p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>s</code> consists of parentheses only <code>&#39;()[]{}&#39;</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "similarQuestions": "[{\"title\": \"Generate Parentheses\", \"titleSlug\": \"generate-parentheses\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Longest Valid Parentheses\", \"titleSlug\": \"longest-valid-parentheses\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Remove Invalid Parentheses\", \"titleSlug\": \"remove-invalid-parentheses\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Check If Word Is Valid After Substitutions\", \"titleSlug\": \"check-if-word-is-valid-after-substitutions\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Check if a Parentheses String Can Be Valid\", \"titleSlug\": \"check-if-a-parentheses-string-can-be-valid\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Move Pieces to Obtain a String\", \"titleSlug\": \"move-pieces-to-obtain-a-string\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "exampleTestcaseList": [
          "\"()\"",
          "\"()[]{}\"",
          "\"(]\"",
          "\"([])\""
        ],
        "topicTags": [
          {
            "name": "String",
            "id": "VG9waWNUYWdOb2RlOjEw",
            "slug": "string"
          },
          {
            "name": "Stack",
            "id": "VG9waWNUYWdOb2RlOjE1",
            "slug": "stack"
          }
        ],
        "codeSnippets": [
          {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    bool isValid(string s) {\n        \n    }\n};"
          },
          {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public boolean isValid(String s) {\n        \n    }\n}"
          },
          {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        "
          },
          {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def isValid(self, s: str) -> bool:\n        "
          },
          {
            "lang": "C",
            "langSlug": "c",
            "code": "bool isValid(char* s) {\n    \n}"
          },
          {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public bool IsValid(string s) {\n        \n    }\n}"
          },
          {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {string} s\n * @return {boolean}\n */\nvar isValid = function(s) {\n    \n};"
          },
          {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function isValid(s: string): boolean {\n    \n};"
          },
          {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Boolean\n     */\n    function isValid($s) {\n        \n    }\n}"
          },
          {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func isValid(_ s: String) -> Bool {\n        \n    }\n}"
          },
          {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun isValid(s: String): Boolean {\n        \n    }\n}"
          },
          {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {\n  bool isValid(String s) {\n    \n  }\n}"
          },
          {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func isValid(s string) bool {\n    \n}"
          },
          {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {String} s\n# @return {Boolean}\ndef is_valid(s)\n    \nend"
          },
          {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def isValid(s: String): Boolean = {\n        \n    }\n}"
          },
          {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn is_valid(s: String) -> bool {\n        \n    }\n}"
          },
          {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (is-valid s)\n  (-> string? boolean?)\n  )"
          },
          {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec is_valid(S :: unicode:unicode_binary()) -> boolean().\nis_valid(S) ->\n  ."
          },
          {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do\n  @spec is_valid(s :: String.t) :: boolean\n  def is_valid(s) do\n    \n  end\nend"
          }
        ],
        "hints": [
          "Use a stack of characters.",
          "When you encounter an opening bracket, push it to the top of the stack.",
          "When you encounter a closing bracket, check if the top of the stack was the opening for it. If yes, pop it from the stack. Otherwise, return false."
        ],
        "solution": {
          "id": "570",
          "canSeeDetail": false,
          "paidOnly": true,
          "hasVideoSolution": true,
          "paidOnlyVideo": true
        },
        "acRate": 41.74401188159465,
        "paidOnly": false,
        "status": null,
        "hasSolution": true,
        "hasVideoSolution": true
      }
    ]
  },
  "selectedUser": null,
  "userLogin": null,
  "profile": null,
  "cookies": null,
  "variables": [
    {
      "name": "CATEGORY",
      "value": "algorithms"
    },
    {
      "name": "LIMIT",
      "value": 20
    },
    {
      "name": "SKIP",
      "value": 0
    },
    {
      "name": "DIFFICULTY",
      "value": "ALL"
    },
    {
      "name": "FOLDER",
      "value": "./examples/python/"
    },
    {
      "name": "SAVE_LOGIN",
      "value": 0
    }
  ]
}